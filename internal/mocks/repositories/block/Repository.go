// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	block "github.com/foolish15/shorten-url-service/internal/repositories/block"
	mock "github.com/stretchr/testify/mock"

	repositories "github.com/foolish15/shorten-url-service/internal/repositories"

	schemas "github.com/foolish15/shorten-url-service/internal/schemas"

	sql "database/sql"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Count provides a mock function with given fields: queries
func (_m *Repository) Count(queries ...repositories.Query) (int64, error) {
	_va := make([]interface{}, len(queries))
	for _i := range queries {
		_va[_i] = queries[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(...repositories.Query) int64); ok {
		r0 = rf(queries...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...repositories.Query) error); ok {
		r1 = rf(queries...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: bl
func (_m *Repository) Create(bl *schemas.Block) error {
	ret := _m.Called(bl)

	var r0 error
	if rf, ok := ret.Get(0).(func(*schemas.Block) error); ok {
		r0 = rf(bl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: t, v
func (_m *Repository) Delete(t schemas.BlockType, v string) error {
	ret := _m.Called(t, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(schemas.BlockType, string) error); ok {
		r0 = rf(t, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: queries
func (_m *Repository) Find(queries ...repositories.Query) ([]schemas.Block, error) {
	_va := make([]interface{}, len(queries))
	for _i := range queries {
		_va[_i] = queries[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []schemas.Block
	if rf, ok := ret.Get(0).(func(...repositories.Query) []schemas.Block); ok {
		r0 = rf(queries...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schemas.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...repositories.Query) error); ok {
		r1 = rf(queries...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// First provides a mock function with given fields: queries
func (_m *Repository) First(queries ...repositories.Query) (schemas.Block, error) {
	_va := make([]interface{}, len(queries))
	for _i := range queries {
		_va[_i] = queries[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 schemas.Block
	if rf, ok := ret.Get(0).(func(...repositories.Query) schemas.Block); ok {
		r0 = rf(queries...)
	} else {
		r0 = ret.Get(0).(schemas.Block)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...repositories.Query) error); ok {
		r1 = rf(queries...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: idb
func (_m *Repository) New(idb ...interface{}) (block.Repository, error) {
	var _ca []interface{}
	_ca = append(_ca, idb...)
	ret := _m.Called(_ca...)

	var r0 block.Repository
	if rf, ok := ret.Get(0).(func(...interface{}) block.Repository); ok {
		r0 = rf(idb...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(block.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(idb...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDB provides a mock function with given fields: idb
func (_m *Repository) SetDB(idb interface{}) error {
	ret := _m.Called(idb)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(idb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartTransaction provides a mock function with given fields:
func (_m *Repository) StartTransaction() (*sql.Tx, block.Repository, error) {
	ret := _m.Called()

	var r0 *sql.Tx
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	var r1 block.Repository
	if rf, ok := ret.Get(1).(func() block.Repository); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(block.Repository)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TranslateOrderField provides a mock function with given fields: input
func (_m *Repository) TranslateOrderField(input string) string {
	ret := _m.Called(input)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Update provides a mock function with given fields: bl
func (_m *Repository) Update(bl *schemas.Block) error {
	ret := _m.Called(bl)

	var r0 error
	if rf, ok := ret.Get(0).(func(*schemas.Block) error); ok {
		r0 = rf(bl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
