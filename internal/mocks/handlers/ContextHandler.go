// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ContextHandler is an autogenerated mock type for the ContextHandler type
type ContextHandler struct {
	mock.Mock
}

// Bind provides a mock function with given fields: _a0
func (_m *ContextHandler) Bind(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FormFile provides a mock function with given fields: name
func (_m *ContextHandler) FormFile(name string) (*multipart.FileHeader, error) {
	ret := _m.Called(name)

	var r0 *multipart.FileHeader
	if rf, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormValue provides a mock function with given fields: name
func (_m *ContextHandler) FormValue(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *ContextHandler) Get(_a0 string) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// JSON provides a mock function with given fields: _a0, _a1
func (_m *ContextHandler) JSON(_a0 int, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultipartForm provides a mock function with given fields:
func (_m *ContextHandler) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	var r0 *multipart.Form
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Param provides a mock function with given fields: name
func (_m *ContextHandler) Param(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueryParam provides a mock function with given fields: _a0
func (_m *ContextHandler) QueryParam(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Redirect provides a mock function with given fields: _a0, _a1
func (_m *ContextHandler) Redirect(_a0 int, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields:
func (_m *ContextHandler) Request() *http.Request {
	ret := _m.Called()

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, val
func (_m *ContextHandler) Set(key string, val interface{}) {
	_m.Called(key, val)
}

// Validate provides a mock function with given fields: i
func (_m *ContextHandler) Validate(i interface{}) error {
	ret := _m.Called(i)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
